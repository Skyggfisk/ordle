diff --git a/dist/index.js b/dist/index.js
index af5abfc1eea3e2a8d0fe0b1548d036a5f50bef11..af99cfa3a7a82ab19a17b6e089a36686b795ec73 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,4 +1,4 @@
-"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __create = Object.create;
+"use strict"; Object.defineProperty(exports, "__esModule", { value: true }); var __create = Object.create;
 var __defProp = Object.defineProperty;
 var __defProps = Object.defineProperties;
 var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
@@ -1502,7 +1502,7 @@ var require_picomatch2 = __commonJS({
 var require_base64 = __commonJS({
   "node_modules/source-map/lib/base64.js"(exports) {
     var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
-    exports.encode = function(number) {
+    exports.encode = function (number) {
       if (0 <= number && number < intToCharMap.length) {
         return intToCharMap[number];
       }
@@ -1591,7 +1591,7 @@ var require_util = __commonJS({
     var MAX_CACHED_INPUTS = 32;
     function lruMemoize(f) {
       const cache = [];
-      return function(input) {
+      return function (input) {
         for (let i = 0; i < cache.length; i++) {
           if (cache[i].input === input) {
             const temp = cache[0];
@@ -1698,7 +1698,7 @@ var require_util = __commonJS({
       return joined;
     }
     exports.join = join;
-    exports.isAbsolute = function(aPath) {
+    exports.isAbsolute = function (aPath) {
       return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
     };
     function relative(aRoot, aPath) {
@@ -1721,7 +1721,7 @@ var require_util = __commonJS({
       return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
     }
     exports.relative = relative;
-    var supportsNullProto = function() {
+    var supportsNullProto = function () {
       const obj = Object.create(null);
       return !("__proto__" in obj);
     }();
@@ -1997,7 +1997,7 @@ var require_source_map_generator = __commonJS({
           file: aSourceMapConsumer.file,
           sourceRoot
         });
-        aSourceMapConsumer.eachMapping(function(mapping) {
+        aSourceMapConsumer.eachMapping(function (mapping) {
           const newMapping = {
             generated: {
               line: mapping.generatedLine,
@@ -2019,7 +2019,7 @@ var require_source_map_generator = __commonJS({
           }
           generator.addMapping(newMapping);
         });
-        aSourceMapConsumer.sources.forEach(function(sourceFile) {
+        aSourceMapConsumer.sources.forEach(function (sourceFile) {
           let sourceRelative = sourceFile;
           if (sourceRoot !== null) {
             sourceRelative = util.relative(sourceRoot, sourceFile);
@@ -2094,7 +2094,7 @@ var require_source_map_generator = __commonJS({
         }
         const newSources = this._mappings.toArray().length > 0 ? new ArraySet() : this._sources;
         const newNames = new ArraySet();
-        this._mappings.unsortedForEach(function(mapping) {
+        this._mappings.unsortedForEach(function (mapping) {
           if (mapping.source === sourceFile && mapping.originalLine != null) {
             const original = aSourceMapConsumer.originalPositionFor({
               line: mapping.originalLine,
@@ -2126,7 +2126,7 @@ var require_source_map_generator = __commonJS({
         }, this);
         this._sources = newSources;
         this._names = newNames;
-        aSourceMapConsumer.sources.forEach(function(srcFile) {
+        aSourceMapConsumer.sources.forEach(function (srcFile) {
           const content = aSourceMapConsumer.sourceContentFor(srcFile);
           if (content != null) {
             if (aSourceMapPath != null) {
@@ -2203,7 +2203,7 @@ var require_source_map_generator = __commonJS({
         return result;
       }
       _generateSourcesContent(aSources, aSourceRoot) {
-        return aSources.map(function(source) {
+        return aSources.map(function (source) {
           if (!this._sourcesContents) {
             return null;
           }
@@ -2290,7 +2290,7 @@ var require_binary_search = __commonJS({
 // node_modules/source-map/lib/read-wasm.js
 var require_read_wasm = __commonJS({
   "node_modules/source-map/lib/read-wasm.js"(exports, module) {
-    var isBrowserEnvironment = function() {
+    var isBrowserEnvironment = function () {
       return typeof window !== "undefined" && this === window;
     }.call();
     if (isBrowserEnvironment) {
@@ -2501,12 +2501,12 @@ var require_source_map_consumer = __commonJS({
           if (sourceRoot) {
             sourceRoot = util.normalize(sourceRoot);
           }
-          sources = sources.map(String).map(util.normalize).map(function(source) {
+          sources = sources.map(String).map(util.normalize).map(function (source) {
             return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
           });
           that._names = ArraySet.fromArray(names.map(String), true);
           that._sources = ArraySet.fromArray(sources, true);
-          that._absoluteSources = that._sources.toArray().map(function(s) {
+          that._absoluteSources = that._sources.toArray().map(function (s) {
             return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
           });
           that.sourceRoot = sourceRoot;
@@ -2700,7 +2700,7 @@ var require_source_map_consumer = __commonJS({
         if (!this.sourcesContent) {
           return false;
         }
-        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
+        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {
           return sc == null;
         });
       }
@@ -2879,7 +2879,7 @@ var require_source_map_consumer = __commonJS({
           generatedLine: util.getArg(aArgs, "line"),
           generatedColumn: util.getArg(aArgs, "column")
         };
-        const sectionIndex = binarySearch.search(needle, this._sections, function(aNeedle, section2) {
+        const sectionIndex = binarySearch.search(needle, this._sections, function (aNeedle, section2) {
           const cmp = aNeedle.generatedLine - section2.generatedOffset.generatedLine;
           if (cmp) {
             return cmp;
@@ -2902,7 +2902,7 @@ var require_source_map_consumer = __commonJS({
         });
       }
       hasContentsOfAllSources() {
-        return this._sections.every(function(s) {
+        return this._sections.every(function (s) {
           return s.consumer.hasContentsOfAllSources();
         });
       }
@@ -2986,7 +2986,7 @@ var require_source_map_consumer = __commonJS({
             throw new Error("Unknown order of iteration.");
         }
         const sourceRoot = this.sourceRoot;
-        mappings.map(function(mapping) {
+        mappings.map(function (mapping) {
           let source = null;
           if (mapping.source !== null) {
             source = this._sources.at(mapping.source);
@@ -3109,7 +3109,7 @@ var require_source_node = __commonJS({
         const node = new SourceNode();
         const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
         let remainingLinesIndex = 0;
-        const shiftNextLine = function() {
+        const shiftNextLine = function () {
           const lineContents = getNextLine();
           const newLine = getNextLine() || "";
           return lineContents + newLine;
@@ -3120,7 +3120,7 @@ var require_source_node = __commonJS({
         let lastGeneratedLine = 1, lastGeneratedColumn = 0;
         let lastMapping = null;
         let nextLine;
-        aSourceMapConsumer.eachMapping(function(mapping) {
+        aSourceMapConsumer.eachMapping(function (mapping) {
           if (lastMapping !== null) {
             if (lastGeneratedLine < mapping.generatedLine) {
               addMappingWithCode(lastMapping, shiftNextLine());
@@ -3154,7 +3154,7 @@ var require_source_node = __commonJS({
           }
           node.add(remainingLines.splice(remainingLinesIndex).join(""));
         }
-        aSourceMapConsumer.sources.forEach(function(sourceFile) {
+        aSourceMapConsumer.sources.forEach(function (sourceFile) {
           const content = aSourceMapConsumer.sourceContentFor(sourceFile);
           if (content != null) {
             if (aRelativePath != null) {
@@ -3175,7 +3175,7 @@ var require_source_node = __commonJS({
       }
       add(aChunk) {
         if (Array.isArray(aChunk)) {
-          aChunk.forEach(function(chunk) {
+          aChunk.forEach(function (chunk) {
             this.add(chunk);
           }, this);
         } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
@@ -3257,7 +3257,7 @@ var require_source_node = __commonJS({
       }
       toString() {
         let str = "";
-        this.walk(function(chunk) {
+        this.walk(function (chunk) {
           str += chunk;
         });
         return str;
@@ -3274,7 +3274,7 @@ var require_source_node = __commonJS({
         let lastOriginalLine = null;
         let lastOriginalColumn = null;
         let lastOriginalName = null;
-        this.walk(function(chunk, original) {
+        this.walk(function (chunk, original) {
           generated.code += chunk;
           if (original.source !== null && original.line !== null && original.column !== null) {
             if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
@@ -3332,7 +3332,7 @@ var require_source_node = __commonJS({
             }
           }
         });
-        this.walkSourceContents(function(sourceFile, sourceContent) {
+        this.walkSourceContents(function (sourceFile, sourceContent) {
           map.setSourceContent(sourceFile, sourceContent);
         });
         return { code: generated.code, map };
@@ -3598,7 +3598,7 @@ var GENERATOR = {
       formatComments(state, node.trailingComments, indent, lineEnd);
     }
   },
-  BlockStatement: BlockStatement = function(node, state) {
+  BlockStatement: BlockStatement = function (node, state) {
     const indent = state.indent.repeat(state.indentLevel++);
     const { lineEnd, writeComments } = state;
     const statementIndent = indent + state.indent;
@@ -3793,7 +3793,7 @@ var GENERATOR = {
     state.write(") ");
     this[node.body.type](node.body, state);
   },
-  ForInStatement: ForInStatement = function(node, state) {
+  ForInStatement: ForInStatement = function (node, state) {
     state.write(`for ${node.await ? "await " : ""}(`);
     const { left } = node;
     if (left.type[0] === "V") {
@@ -3810,7 +3810,7 @@ var GENERATOR = {
   DebuggerStatement(node, state) {
     state.write("debugger;", node);
   },
-  FunctionDeclaration: FunctionDeclaration = function(node, state) {
+  FunctionDeclaration: FunctionDeclaration = function (node, state) {
     state.write((node.async ? "async " : "") + (node.generator ? "function* " : "function ") + (node.id ? node.id.name : ""), node);
     formatSequence(state, node.params);
     state.write(" ");
@@ -3852,7 +3852,7 @@ var GENERATOR = {
     const { length } = specifiers;
     let i = 0;
     if (length > 0) {
-      for (; i < length; ) {
+      for (; i < length;) {
         if (i > 0) {
           state.write(", ");
         }
@@ -3870,7 +3870,7 @@ var GENERATOR = {
       }
       if (i < length) {
         state.write("{");
-        for (; ; ) {
+        for (; ;) {
           const specifier = specifiers[i];
           const { name } = specifier.imported;
           state.write(name, specifier);
@@ -3910,7 +3910,7 @@ var GENERATOR = {
       state.write("{");
       const { specifiers } = node, { length } = specifiers;
       if (length > 0) {
-        for (let i = 0; ; ) {
+        for (let i = 0; ;) {
           const specifier = specifiers[i];
           const { name } = specifier.local;
           state.write(name, specifier);
@@ -3994,7 +3994,7 @@ var GENERATOR = {
   Super(node, state) {
     state.write("super", node);
   },
-  RestElement: RestElement = function(node, state) {
+  RestElement: RestElement = function (node, state) {
     state.write("...");
     this[node.argument.type](node.argument, state);
   },
@@ -4033,11 +4033,11 @@ var GENERATOR = {
     formatExpression(state, node.tag, node);
     this[node.quasi.type](node.quasi, state);
   },
-  ArrayExpression: ArrayExpression = function(node, state) {
+  ArrayExpression: ArrayExpression = function (node, state) {
     state.write("[");
     if (node.elements.length > 0) {
       const { elements } = node, { length } = elements;
-      for (let i = 0; ; ) {
+      for (let i = 0; ;) {
         const element = elements[i];
         if (element != null) {
           this[element.type](element, state);
@@ -4067,7 +4067,7 @@ var GENERATOR = {
       }
       const comma = "," + lineEnd;
       const { properties } = node, { length } = properties;
-      for (let i = 0; ; ) {
+      for (let i = 0; ;) {
         const property = properties[i];
         if (writeComments && property.comments != null) {
           formatComments(state, property.comments, propertyIndent, lineEnd);
@@ -4137,7 +4137,7 @@ var GENERATOR = {
     state.write("{");
     if (node.properties.length > 0) {
       const { properties } = node, { length } = properties;
-      for (let i = 0; ; ) {
+      for (let i = 0; ;) {
         this[properties[i].type](properties[i], state);
         if (++i < length) {
           state.write(", ");
@@ -4194,7 +4194,7 @@ var GENERATOR = {
     state.write(" = ");
     this[node.right.type](node.right, state);
   },
-  BinaryExpression: BinaryExpression = function(node, state) {
+  BinaryExpression: BinaryExpression = function (node, state) {
     const isIn = node.operator === "in";
     if (isIn) {
       state.write("(");
@@ -4545,3 +4545,6 @@ function VitePluginReactRemoveAttributes({
 
 
 exports.default = VitePluginReactRemoveAttributes;
+
+// fix for ESM/CJS interop
+exports.VitePluginReactRemoveAttributes = VitePluginReactRemoveAttributes;
\ No newline at end of file
diff --git a/dist/index.mjs b/dist/index.mjs
index d08b6a02b5f7205c3b22641e27dee7fe16652005..f2217dde22ece2684081a75729a96415e93cf1be 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1502,7 +1502,7 @@ var require_picomatch2 = __commonJS({
 var require_base64 = __commonJS({
   "node_modules/source-map/lib/base64.js"(exports) {
     var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
-    exports.encode = function(number) {
+    exports.encode = function (number) {
       if (0 <= number && number < intToCharMap.length) {
         return intToCharMap[number];
       }
@@ -1591,7 +1591,7 @@ var require_util = __commonJS({
     var MAX_CACHED_INPUTS = 32;
     function lruMemoize(f) {
       const cache = [];
-      return function(input) {
+      return function (input) {
         for (let i = 0; i < cache.length; i++) {
           if (cache[i].input === input) {
             const temp = cache[0];
@@ -1698,7 +1698,7 @@ var require_util = __commonJS({
       return joined;
     }
     exports.join = join;
-    exports.isAbsolute = function(aPath) {
+    exports.isAbsolute = function (aPath) {
       return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
     };
     function relative(aRoot, aPath) {
@@ -1721,7 +1721,7 @@ var require_util = __commonJS({
       return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
     }
     exports.relative = relative;
-    var supportsNullProto = function() {
+    var supportsNullProto = function () {
       const obj = Object.create(null);
       return !("__proto__" in obj);
     }();
@@ -1997,7 +1997,7 @@ var require_source_map_generator = __commonJS({
           file: aSourceMapConsumer.file,
           sourceRoot
         });
-        aSourceMapConsumer.eachMapping(function(mapping) {
+        aSourceMapConsumer.eachMapping(function (mapping) {
           const newMapping = {
             generated: {
               line: mapping.generatedLine,
@@ -2019,7 +2019,7 @@ var require_source_map_generator = __commonJS({
           }
           generator.addMapping(newMapping);
         });
-        aSourceMapConsumer.sources.forEach(function(sourceFile) {
+        aSourceMapConsumer.sources.forEach(function (sourceFile) {
           let sourceRelative = sourceFile;
           if (sourceRoot !== null) {
             sourceRelative = util.relative(sourceRoot, sourceFile);
@@ -2094,7 +2094,7 @@ var require_source_map_generator = __commonJS({
         }
         const newSources = this._mappings.toArray().length > 0 ? new ArraySet() : this._sources;
         const newNames = new ArraySet();
-        this._mappings.unsortedForEach(function(mapping) {
+        this._mappings.unsortedForEach(function (mapping) {
           if (mapping.source === sourceFile && mapping.originalLine != null) {
             const original = aSourceMapConsumer.originalPositionFor({
               line: mapping.originalLine,
@@ -2126,7 +2126,7 @@ var require_source_map_generator = __commonJS({
         }, this);
         this._sources = newSources;
         this._names = newNames;
-        aSourceMapConsumer.sources.forEach(function(srcFile) {
+        aSourceMapConsumer.sources.forEach(function (srcFile) {
           const content = aSourceMapConsumer.sourceContentFor(srcFile);
           if (content != null) {
             if (aSourceMapPath != null) {
@@ -2203,7 +2203,7 @@ var require_source_map_generator = __commonJS({
         return result;
       }
       _generateSourcesContent(aSources, aSourceRoot) {
-        return aSources.map(function(source) {
+        return aSources.map(function (source) {
           if (!this._sourcesContents) {
             return null;
           }
@@ -2290,7 +2290,7 @@ var require_binary_search = __commonJS({
 // node_modules/source-map/lib/read-wasm.js
 var require_read_wasm = __commonJS({
   "node_modules/source-map/lib/read-wasm.js"(exports, module) {
-    var isBrowserEnvironment = function() {
+    var isBrowserEnvironment = function () {
       return typeof window !== "undefined" && this === window;
     }.call();
     if (isBrowserEnvironment) {
@@ -2501,12 +2501,12 @@ var require_source_map_consumer = __commonJS({
           if (sourceRoot) {
             sourceRoot = util.normalize(sourceRoot);
           }
-          sources = sources.map(String).map(util.normalize).map(function(source) {
+          sources = sources.map(String).map(util.normalize).map(function (source) {
             return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
           });
           that._names = ArraySet.fromArray(names.map(String), true);
           that._sources = ArraySet.fromArray(sources, true);
-          that._absoluteSources = that._sources.toArray().map(function(s) {
+          that._absoluteSources = that._sources.toArray().map(function (s) {
             return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
           });
           that.sourceRoot = sourceRoot;
@@ -2700,7 +2700,7 @@ var require_source_map_consumer = __commonJS({
         if (!this.sourcesContent) {
           return false;
         }
-        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
+        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {
           return sc == null;
         });
       }
@@ -2879,7 +2879,7 @@ var require_source_map_consumer = __commonJS({
           generatedLine: util.getArg(aArgs, "line"),
           generatedColumn: util.getArg(aArgs, "column")
         };
-        const sectionIndex = binarySearch.search(needle, this._sections, function(aNeedle, section2) {
+        const sectionIndex = binarySearch.search(needle, this._sections, function (aNeedle, section2) {
           const cmp = aNeedle.generatedLine - section2.generatedOffset.generatedLine;
           if (cmp) {
             return cmp;
@@ -2902,7 +2902,7 @@ var require_source_map_consumer = __commonJS({
         });
       }
       hasContentsOfAllSources() {
-        return this._sections.every(function(s) {
+        return this._sections.every(function (s) {
           return s.consumer.hasContentsOfAllSources();
         });
       }
@@ -2986,7 +2986,7 @@ var require_source_map_consumer = __commonJS({
             throw new Error("Unknown order of iteration.");
         }
         const sourceRoot = this.sourceRoot;
-        mappings.map(function(mapping) {
+        mappings.map(function (mapping) {
           let source = null;
           if (mapping.source !== null) {
             source = this._sources.at(mapping.source);
@@ -3109,7 +3109,7 @@ var require_source_node = __commonJS({
         const node = new SourceNode();
         const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
         let remainingLinesIndex = 0;
-        const shiftNextLine = function() {
+        const shiftNextLine = function () {
           const lineContents = getNextLine();
           const newLine = getNextLine() || "";
           return lineContents + newLine;
@@ -3120,7 +3120,7 @@ var require_source_node = __commonJS({
         let lastGeneratedLine = 1, lastGeneratedColumn = 0;
         let lastMapping = null;
         let nextLine;
-        aSourceMapConsumer.eachMapping(function(mapping) {
+        aSourceMapConsumer.eachMapping(function (mapping) {
           if (lastMapping !== null) {
             if (lastGeneratedLine < mapping.generatedLine) {
               addMappingWithCode(lastMapping, shiftNextLine());
@@ -3154,7 +3154,7 @@ var require_source_node = __commonJS({
           }
           node.add(remainingLines.splice(remainingLinesIndex).join(""));
         }
-        aSourceMapConsumer.sources.forEach(function(sourceFile) {
+        aSourceMapConsumer.sources.forEach(function (sourceFile) {
           const content = aSourceMapConsumer.sourceContentFor(sourceFile);
           if (content != null) {
             if (aRelativePath != null) {
@@ -3175,7 +3175,7 @@ var require_source_node = __commonJS({
       }
       add(aChunk) {
         if (Array.isArray(aChunk)) {
-          aChunk.forEach(function(chunk) {
+          aChunk.forEach(function (chunk) {
             this.add(chunk);
           }, this);
         } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
@@ -3257,7 +3257,7 @@ var require_source_node = __commonJS({
       }
       toString() {
         let str = "";
-        this.walk(function(chunk) {
+        this.walk(function (chunk) {
           str += chunk;
         });
         return str;
@@ -3274,7 +3274,7 @@ var require_source_node = __commonJS({
         let lastOriginalLine = null;
         let lastOriginalColumn = null;
         let lastOriginalName = null;
-        this.walk(function(chunk, original) {
+        this.walk(function (chunk, original) {
           generated.code += chunk;
           if (original.source !== null && original.line !== null && original.column !== null) {
             if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
@@ -3332,7 +3332,7 @@ var require_source_node = __commonJS({
             }
           }
         });
-        this.walkSourceContents(function(sourceFile, sourceContent) {
+        this.walkSourceContents(function (sourceFile, sourceContent) {
           map.setSourceContent(sourceFile, sourceContent);
         });
         return { code: generated.code, map };
@@ -3598,7 +3598,7 @@ var GENERATOR = {
       formatComments(state, node.trailingComments, indent, lineEnd);
     }
   },
-  BlockStatement: BlockStatement = function(node, state) {
+  BlockStatement: BlockStatement = function (node, state) {
     const indent = state.indent.repeat(state.indentLevel++);
     const { lineEnd, writeComments } = state;
     const statementIndent = indent + state.indent;
@@ -3793,7 +3793,7 @@ var GENERATOR = {
     state.write(") ");
     this[node.body.type](node.body, state);
   },
-  ForInStatement: ForInStatement = function(node, state) {
+  ForInStatement: ForInStatement = function (node, state) {
     state.write(`for ${node.await ? "await " : ""}(`);
     const { left } = node;
     if (left.type[0] === "V") {
@@ -3810,7 +3810,7 @@ var GENERATOR = {
   DebuggerStatement(node, state) {
     state.write("debugger;", node);
   },
-  FunctionDeclaration: FunctionDeclaration = function(node, state) {
+  FunctionDeclaration: FunctionDeclaration = function (node, state) {
     state.write((node.async ? "async " : "") + (node.generator ? "function* " : "function ") + (node.id ? node.id.name : ""), node);
     formatSequence(state, node.params);
     state.write(" ");
@@ -3852,7 +3852,7 @@ var GENERATOR = {
     const { length } = specifiers;
     let i = 0;
     if (length > 0) {
-      for (; i < length; ) {
+      for (; i < length;) {
         if (i > 0) {
           state.write(", ");
         }
@@ -3870,7 +3870,7 @@ var GENERATOR = {
       }
       if (i < length) {
         state.write("{");
-        for (; ; ) {
+        for (; ;) {
           const specifier = specifiers[i];
           const { name } = specifier.imported;
           state.write(name, specifier);
@@ -3910,7 +3910,7 @@ var GENERATOR = {
       state.write("{");
       const { specifiers } = node, { length } = specifiers;
       if (length > 0) {
-        for (let i = 0; ; ) {
+        for (let i = 0; ;) {
           const specifier = specifiers[i];
           const { name } = specifier.local;
           state.write(name, specifier);
@@ -3994,7 +3994,7 @@ var GENERATOR = {
   Super(node, state) {
     state.write("super", node);
   },
-  RestElement: RestElement = function(node, state) {
+  RestElement: RestElement = function (node, state) {
     state.write("...");
     this[node.argument.type](node.argument, state);
   },
@@ -4033,11 +4033,11 @@ var GENERATOR = {
     formatExpression(state, node.tag, node);
     this[node.quasi.type](node.quasi, state);
   },
-  ArrayExpression: ArrayExpression = function(node, state) {
+  ArrayExpression: ArrayExpression = function (node, state) {
     state.write("[");
     if (node.elements.length > 0) {
       const { elements } = node, { length } = elements;
-      for (let i = 0; ; ) {
+      for (let i = 0; ;) {
         const element = elements[i];
         if (element != null) {
           this[element.type](element, state);
@@ -4067,7 +4067,7 @@ var GENERATOR = {
       }
       const comma = "," + lineEnd;
       const { properties } = node, { length } = properties;
-      for (let i = 0; ; ) {
+      for (let i = 0; ;) {
         const property = properties[i];
         if (writeComments && property.comments != null) {
           formatComments(state, property.comments, propertyIndent, lineEnd);
@@ -4137,7 +4137,7 @@ var GENERATOR = {
     state.write("{");
     if (node.properties.length > 0) {
       const { properties } = node, { length } = properties;
-      for (let i = 0; ; ) {
+      for (let i = 0; ;) {
         this[properties[i].type](properties[i], state);
         if (++i < length) {
           state.write(", ");
@@ -4194,7 +4194,7 @@ var GENERATOR = {
     state.write(" = ");
     this[node.right.type](node.right, state);
   },
-  BinaryExpression: BinaryExpression = function(node, state) {
+  BinaryExpression: BinaryExpression = function (node, state) {
     const isIn = node.operator === "in";
     if (isIn) {
       state.write("(");
@@ -4545,3 +4545,6 @@ function VitePluginReactRemoveAttributes({
 export {
   VitePluginReactRemoveAttributes as default
 };
+
+// fix for ESM/CJS interop
+export { VitePluginReactRemoveAttributes };
\ No newline at end of file
